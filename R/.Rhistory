dir()
install.packages('runjags')
install.packages('coda')
install.packages('runjags')
install.packages('runjags')
install.packages('coda')
Sys.which('pdflatex')
Sys.path('pdflatex')
Sys.getenv('PATH')
Sys.setenv(PATH=paste(Sys.getenv("PATH"),"/usr/texbin",sep=":"))
Sys.which('pdflatex')
Sys.getenv('PATH')
Sys.which('pdflatex')
Sys.which('pdflatex')
require('runjags')
install.packages('runjags')
install.packages('rjags')
install.packages('coda')
install.packages('runjags')
require(rjags)
require('BANOVA')
?BANOVA
require('BANOVA')
?BANOVA
data(colorad
)
head(colorad)
colorad$blur<-colorad$blur - mean(colorad$blur)
app < −BANOVA.Bin(y ∼ typic, ∼ color ∗ blur, colorad, colorad$id, as.integer(16), burnin = 3000, sample = 2000, thin = 5)
app <−BANOVA.Bin(y ∼ typic, ∼ color ∗ blur, colorad, colorad$id, as.integer(16), burnin = 3000, sample = 2000, thin = 5)
app <- BANOVA.Bin(y ∼ typic, ∼ color ∗ blur, colorad, colorad$id, as.integer(16), burnin = 3000, sample = 2000, thin = 5)
app <- BANOVA.Bin(y ~ typic, ~ color ∗ blur, colorad, colorad$id, as.integer(16), burnin = 3000, sample = 2000, thin = 5)
app <- BANOVA.Bin(y ~ typic, ~ color * blur, colorad, colorad$id, as.integer(16), burnin = 3000, sample = 2000, thin = 5)
conv.diag(app)
summary(app)
table.means(app)
require('BANOVA')
data(colorad)
colorad$blur <- colorad$blur - mean(colorad$blur)
app <- BANOVA.Bin(y ~ typic, ~ color * blur, colorad, colorad$id, as.integer(16), burnin = 3000, sample = 2000, thin = 5)
summary(app)
conv.diag(app)
table.means(app)
require('BANOVA')
data(colorad)
colorad$blur <- colorad$blur - mean(colorad$blur)
app <−BANOVA.Bin(y ~ typic, ~ color * blur, colorad, colorad$id, as.integer(16), burnin = 3000, sample = 2000, thin = 5)
app <- BANOVA.Bin(y ~ typic, ~ color * blur, colorad, colorad$id, as.integer(16), burnin = 3000, sample = 2000, thin = 5)
conv.diag(app)
trace.plot(app)
?BANOVA
ttrace.plot(app)
trace.plot(app)
trace.plot(app)
plot(app)
?trace.plot
require(BANOVA)
data(colorad)
colorad$blur <- colorad$blur - mean(colorad$blur)
app <- BANOVA.Bin(y ~ typic, ~ color * blur, colorad, colorad$id, as.integer(16), burnin = 3000, sample = 2000, thin = 5)
trace.plot(app)
require(BANOVA)
data(colorad)
colorad$blur <- colorad$blur - mean(colorad$blur)
app <- BANOVA.Bin(y ~ typic, ~ color * blur, colorad, colorad$id, as.integer(16), burnin = 3000, sample = 2000, thin = 5)
summary(app)
summary(app)
conv.diag(app)
trace.plot(app)
data(color)
data(colorad)
require(BANOVA)
data(colorad)
colorad$blur <- colorad$blur - mean(colorad$blur)
app <- BANOVA.Bin(y ~ typic, ~ color * blur, colorad, colorad$id, as.integer(16), burnin = 3000, sample = 2000, thin = 5)
cat(app$JAGSmodel)
conv.diag(app)
trace.plot(app)
summary(app)
table.means(app)
x11()
x11()
library('BANOVA')
help(BANOVA)
y <- rnorm(10,2,2)
x <- 2*y + rnorm(10)
cor(x,y)
lm(y~x)
summary(lm(y~x))
summary(lm(y~x-1))
cor(x,y)^2
sum((y - mean(y))^2)
sol1<-(lm(y~x))
sol2<-(lm(y~x-1))
sol2$residuals
sum((sol2$residuals)^2)
sum((sol1$residuals)^2)
1-2.710406/51.2958
1-2.344327/51.2958
cor(y,sol2$fitted.values)
cor(y,sol1$fitted.values)
require('runjags')
versions()
version()
version
runjags
?runjags
versions
version
require('runjags')
?runjags
require(BANOVA)
data("goalstudy")
goalstudy$logbid <- log(goalstudy$bid + 1)
app_1 <- BANOVA.Normal(logbid~1, ~goalprogress * varmeans,  goalstudy,
goalstudy$id, burnin = 5, sample = 10, thin = 1)
cat(app_1$JAGSmodel)
app_1 <- BANOVA.Normal(logbid~1, ~goalprogress * varmeans,  goalstudy,
goalstudy$id, burnin = 5, sample = 10, thin = 1, conv_speedup = T)
cat(app_1$JAGSmodel)
app_1 <- BANOVA.Normal(logbid~1, ~goalprogress * varmeans,  goalstudy,
goalstudy$id, l1_hyper = c(1,5), burnin = 5, sample = 10, thin = 1, conv_speedup = T)
cat(app_1$JAGSmodel)
?BANOVA.Normal
?BANOVA
remove.packages('BANOVA')
remove.packages('BANOVA')
setwd("~/Google Drive/Dropbox/Rweb/NewCode/codeForPackage/")
install.packages('BANOVA_0.6.tar.gz', repos = NULL, type = 'source')
require(BANOVA)
setwd("~/Desktop/")
data <- read.csv(file ="US_China_Data_Full_No_Missings.csv")
sol <- BANOVA.Normal(timems~1,~country*expression*gaze,country.data,country.data$subjectID,burnin=5000,sample=5000, thin=5)
sol <- BANOVA.Normal(timems~1,~country*expression*gaze,data,data$subjectID,burnin=5000,sample=5000, thin=5)
summary(sol)
unique(data$country)
data$country <- as.factor(data$country)
summary(data)
unique(data$gaze)
data$gaze <- as.factor(data$gaze)
unique(data$expression)
data$expression <- as.factor(data$expression)
sol <- BANOVA.Normal(timems~1,~country*expression*gaze,data,data$subjectID,burnin=5000,sample=5000, thin=5)
summary(sol)
data <- read.csv(file ="US_China_Data_Full_No_Missings.csv")
sol <- BANOVA.Normal(timems~1,~country*expression*gaze,data,data$subjectID,burnin=10000,sample=5000, thin=5)
summary(sol)
sol <- BANOVA.Normal(timems~1,~country*expression*gaze,data,data$subjectID,burnin=20000,sample=5000, thin=5)
summary(sol)
sol <- BANOVA.Normal(timems~1,~country*expression*gaze,data,data$subjectID,burnin=50000,sample=5000, thin=5)
summary(sol)
data$country <- as.factor(data$country)
data$expression <- as.factor(data$expression)
data$gaze <- as.factor(data$gaze)
sol <- BANOVA.Normal(timems~1,~country*expression*gaze,data,data$subjectID,burnin=50000,sample=5000, thin=5)
summary(sol)
sol <- BANOVA.Normal(timems~1,~country,data,data$subjectID,burnin=50000,sample=5000, thin=5)
summary(sol)
setwd("~/Google Drive/Dropbox/Rweb/NewCode/codeForPackage/")
setwd("~/Google Drive/Dropbox/Rweb/JSSsubmit")
setwd("~/Google Drive/Dropbox/Rweb/NewCode/codeForPackage/BANOVA_v6_test/R")
levels(as.factor(c(1,2,1,1,2,3,2,1,)))
?levels
a <- as.factor(c(1,2,1,1,2,3,2,1,))
levels(as.factor(c(1,2,1,1,2,3,2,1)))
temp1 <- factor(c(1,1,2,2,3,3,4,4))
temp2 <- factor(c(1,1,1,1,2,2,2,2))
tempdata <- data.frame(cbind(temp1,temp2))
head(tempdata)
class(tempdata$temp1)
tempdata[,1] <- as.factor(tempdata[,1])
tempdata[,2] <- as.factor(tempdata[,2])
tempmatrix <- model.matrix(~ temp1 * temp2, data = tempdata)
tempmatrix
temp3 <- factor(c(1,1,1,2,2,2,3,3))
tempdata <- data.frame(cbind(temp1,temp2,temp3))
tempmatrix <- model.matrix(~ temp1 * temp2 * temp3, data = tempdata)
tempmatrix
tempdata[,3] <- as.factor(tempdata[,3])
tempmatrix <- model.matrix(~ temp1 * temp2 * temp3, data = tempdata)
tempdata[,3] <- as.factor(tempdata[,3])
tempmatrix
tempdata[,2] <- as.factor(tempdata[,2])
tempdata[,1] <- as.factor(tempdata[,1])
tempmatrix <- model.matrix(~ temp1 * temp2 * temp3, data = tempdata)
tempmatrix
ss <- list()
ss$index <- c(1,2,3)
ss
attr(ss$index, 'lower_order_index') <- list(a = c(1,2))
ss
attr(ss$index)
ss$index
attributes(ss$index)
ss$index$lower_order_index
attributes(ss$index, 'lower_order_index')[[1]] <- c(1,2,3)
attributes(ss$index, 'lower_order_index') <- c(1,2,3)
attributes(ss$index, 'lower_order_index')
attr(ss$index, 'lower_order_index')
attr(ss$index, 'lower_order_index')[[1]] <- c(1,2,3)
ss$index
attr(ss$index, 'lower_order_index')[[2]] <- c(1,2,3)
ss$index
f2
mf2
mf2 <- model.frame(~ temp1 * temp2 * temp3, data = tempdata)
attr(mf2,'terms')
attr(mf2)
mf2
attributes(mf2)
mf2
tempdata
X <- model.matrix(attr(mf2,'terms'), data = mf2)
X
colnames((x))
colnames(X
)
a <- matrix(0, dim = c(2,3))
a <- matrix(0, nrow = 2, ncol = 3)
a
colnames(a) <- c('a' ,'b', 'c')
a
a <- matrix(0, nrow = 2, ncol = 1)
colnames(a) <- c('a' ,'b', 'c')
colnames(a) <- c('a')
a
mf2 <- model.frame(~ temp1 * temp3 * temp2, data = tempdata)
attributes(mf2)
contr.sum(2)
contr.sum(4)
a
a$a <- factor(c(1,1,2,2,3,3,4,4))
a$b <- factor(c(1,1,2,2,3,3,4,4))
a
t <- data.frame(a = factor(c(1,1,2,2,3,3,4,4)))
t
model.matrix(~a, data = t)
t <- data.frame(a = factor(c(1,2,3,4)))
model.matrix(~a, data = t)
a <- factor(c('a','a','b','b'))
levels(a)
t <- data.frame(a = factor(c('c','c','d','d')))
model.matrix(~a, data = t)
t <- data.frame(a = factor(c('c','e','d','f')))
model.matrix(~a, data = t)
t
levels(t$a)
mf2
X
?levels
f <- factor(c("a","b"))
levels(f)
attr(f)
f
str(f)
head(data)
summary(sol)
mf <- model.frame(formula = "timems ~ country", data = data)
attr(mf,'names')
mf <- model.frame(formula = "timems ~ country*gender", data = data)
attr(mf,'names')
a <- list()
a[[1]] <- 1
a[[2]] <- 3
attr(a, 'names') <- c('c','d')
a
a$c
a[[1]]
a$e <- 5
a
a[[3]]
a$a <- 5
a
a[[4]]
contr.sum(3)
?contr.sum
contr.sum(f)
f
f <- factor(c("a","b","c"))
f
contr.sum(f)
model.matrix(~f, data = f)
a <- list()
a[[1]] <- 1
attr(a[[1]],'names') <- 'c'
a
a[[1]]
a[[1]] + 2
i = 1
paste("attr(results[[",i,"]], 'names') <-", var_names[i],sep="")
var_names <- c('a','b')
paste("attr(results[[",i,"]], 'names') <-", var_names[i],sep="")
eval(parse(text = paste("attr(results[[",i,"]], 'names') <- '", var_names[i],"'",sep="")
;
paste("attr(results[[",i,"]], 'names') <- '", var_names[i],"'",sep="")
f
levels(f)
length(unique(f))
paste(var_name[1],'<- factor(c(1:',level,'))', sep = '')
var_name <- c('a','b')
paste(var_name[1],'<- factor(c(1:',level,'))', sep = '')
paste(var_name[1],'<- factor(c(1:',5,'))', sep = '')
a<- factor(c(1:5))
a
paste('effect_matrix <- model.matrix(~',var_name,', data = ', var_name,')', sep='')
levels(a)
str(mf2)
get_values
get.values <-
function(data, mf, id_index = array(dim = 0), intercept_names = character(0)){
# the order of var_names in results matters
var_names <- c(intercept_names, attr(mf,'names'))
results <- list()
if (length(var_names) > 0){
for (i in 1: length(var_names)){
if (length(id_index) == 0){
eval(parse(text = paste('results[[',i,']] <- data$',var_names[i],sep='')))
eval(parse(text = paste("attr(results[[",i,"]], 'names') <- '", var_names[i],"'",sep="")))
}else{
eval(parse(text = paste('results[[',i,']] <- data$',var_names[i], '[id_index]', sep='')))
# TODO fix id_index for attr var_names
}
}
}
return(results)
}
head(data)
head(tempdata)
get.values(tempdata, mf2)
sol <- get.values(tempdata, mf2)
sol[[1]]
names(sol[[1]])
attr(sol[[1]], 'names')
get.values <-
function(data, mf, id_index = array(dim = 0), intercept_names = character(0)){
# the order of var_names in results matters
var_names <- c(intercept_names, attr(mf,'names'))
results <- list()
if (length(var_names) > 0){
for (i in 1: length(var_names)){
if (length(id_index) == 0){
eval(parse(text = paste('results[[',i,']] <- data$',var_names[i],sep='')))
eval(parse(text = paste("attr(results[[",i,"]], 'var_names') <- '", var_names[i],"'",sep="")))
}else{
eval(parse(text = paste('results[[',i,']] <- data$',var_names[i], '[id_index]', sep='')))
# TODO fix id_index for attr var_names
}
}
}
return(results)
}
sol <- get.values(tempdata, mf2)
attr(sol[[1]], 'names')
attr(sol[[1]], 'var_names')
effect.matrix.factor <-
function (factors, assign = array(dim = 0), index_factor = NA, numeric_index = array(dim = 0)){
#  if (length(assign) != 0){
#    index <- which(assign == index_factor)
#    level <- length(index) + 1
#    effect_matrix <- matrix(0, nrow = level, ncol = length(assign))
#    effect_matrix[,index] <- contr.sum(level)
#    effect_matrix[,1] <- 1 # grand mean included
#if (length(numeric_index) > 0) effect_matrix[, numeric_index] <- 1 # consider the covariates effect
#    attr(effect_matrix, 'levels') <- factors
#  }
# new version
if (length(assign) != 0){
level <- length(unique(factors))
var_name <- attr(factors,'var_names')
eval(parse(text = paste(var_name,'<- factor(c(1:',level,'))', sep = '')))
# with column names, and include an intercept
eval(parse(text = paste('effect_matrix <- model.matrix(~',var_name,', data = ', var_name,')', sep='')))
attr(effect_matrix, 'levels') <- factors
}
return(effect_matrix)
}
effect.matrix.factor(sol[[1]])
effect.matrix.factor(sol[[1]], c(1,1,2,2))
sol
attr(attr(mf1,'terms'),'dataClasses')
attr(attr(mf,'terms'),'dataClasses')
attr(attr(mf2,'terms'),'dataClasses')
attr(mf2,'names')
sol[[1]]$names
?BANOVA
attr(attr(mf1,'terms'),'intercept')
attr(attr(mf,'terms'),'intercept')
data("goalstudy")
?goalstudy
res1 <- BANOVA.Normal(bid~1, ~goalprogress*varmeans,  goalstudy, goalstudy$id,
burnin = 1000, sample = 1000, thin = 1)
attr(res1$dMatrice$X,'dataClasses'
)
head(res1$dMatrice$X)
attr(res1$dMatrice$X,'assign')
head(goalstudy)
res1 <- BANOVA.Normal(bid~perceivedsim, ~goalprogress*varmeans,  goalstudy, goalstudy$id,
burnin = 1000, sample = 1000, thin = 1)
attr(res1$dMatrice$X,'dataClasses')
l1_values = attr(x$dMatrice$X, 'varValues')
attr(res1$dMatrice$X, 'varValues')
attr(mf2,'names')
attr(mf,'names')
est_matrix <- array(0 , dim = c(2,2, 3))
row.names(est_matrix)
row.names(est_matrix) <- c('a','b')
est_matrix
col.names(est_matrix) <- c('a','b')
colnames(est_matrix) <- c('c','d')
est_matrix
head(res1$samples_l2_param)
res1
attr(res1$dMatrice$X, 'varValues'
)
res1$dMatrice$X
pwd()
cwd()
wd()
setwd("~/Google Drive/Dropbox/Rweb/NewCode/codeForPackage/BANOVA_v6_test/R")
attr(res1$dMatrice$X, 'varValues')
getwd()
attr(res1$dMatrice$X, 'varValues')[[1]]
attr(attr(res1$dMatrice$X, 'varValues')[[1]],'var_names')
attr(res1$dMatrice$X, 'assign')
mf
mf2
X <- model.matrix(attr(mf2,'terms'), data = mf2)
X
attr(mf2,'terms')
head(res1$samples_l2_param)
